plugins {
	id 'java-library'
	id 'maven-publish'
	id 'signing'
	id 'jacoco'
	alias libs.plugins.io.freefair.lombok
	alias libs.plugins.com.github.ben.manes.versions
	alias libs.plugins.nl.littlerobots.version.catalog.update
}
dependencies {
	implementation libs.org.influxdb.influxdb.java
	implementation libs.org.apache.commons.commons.lang3
	implementation libs.org.slf4j.slf4j.api

	testImplementation libs.org.testcontainers.influxdb
	testImplementation libs.ch.qos.logback.logback.classic
	testImplementation libs.com.tngtech.java.junit.dataprovider
	testImplementation libs.org.apache.commons.commons.collections4
	testImplementation libs.org.mockito.mockito.core
}

ext.moduleName = 'InfluxDbSqlDriver'


java {
	sourceCompatibility = "11"
	targetCompatibility = "11"
	withJavadocJar()
	withSourcesJar()
}

compileJava {
	inputs.property('moduleName', moduleName)
	doFirst {
		options.compilerArgs = ['--module-path', classpath.asPath]
	}
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = false
	}
}

repositories {
	mavenCentral()
}

javadoc {
	inputs.property('moduleName', moduleName)
	doFirst {
		options.modulePath = [] + classpath.files
		options.classpath = []
	}
	options {
		//failOnError = false
		encoding = 'UTF-8'
		//addBooleanOption 'Xdoclint:all,-html,-accessibility,-reference', true
	}
}

jar {
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
	duplicatesStrategy DuplicatesStrategy.EXCLUDE
}

publishing {
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/konikvranik/jdbc-influxdb")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
				password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
			}
		}
		maven {
			name = "OSSRHPackages"
			url = uri(version.endsWith('SNAPSHOT')
					? "https://s01.oss.sonatype.org/content/repositories/snapshots/"
					: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")

			credentials {
				username = project.findProperty("ossrh.username") ?: System.getenv("OSSRH_USERNAME")
				password = project.findProperty("ossrh.password") ?: System.getenv("OSSRH_PASSWORD")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			from(project.components.java)
		}
		project.publishing.publications.withType(MavenPublication) {
			pom {
				name = 'influxdb-jdbc'
				description = 'JDBC driver for InfluxDB'
				url = 'https://github.com/konikvranik/jdbc-influxdb'
				organization {
					name = 'SuTeren'
					url = 'https://github.com/konikvranik'
				}
				ciManagement {
					system = 'GitHub'
					url = 'https://github.com/konikvranik/jdbc-influxdb/actions'
				}
				issueManagement {
					system = 'GitHub'
					url = 'https://github.com/konikvranik/jdbc-influxdb/issues'
				}
				scm {
					connection = 'scm:git:https://github.com/konikvranik/jdbc-influxdb.git'
					developerConnection = 'scm:git:ssh:git@github.com:konikvranik/jdbc-influxdb.git'
					url = 'https://github.com/konikvranik/jdbc-influxdb/'
				}
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'konikvranik'
						name = 'Petr Vran√≠k'
						email = 'petr@vranik.name'
					}
				}
			}
		}
	}
}

signing {
	useInMemoryPgpKeys(findProperty('signing.key') ?: System.getenv('GPG_SIGNING_KEY'), findProperty('signing.password') ?: System.getenv('GPG_SIGNING_PASSWORD'))
	sign publishing.publications.mavenJava
}
