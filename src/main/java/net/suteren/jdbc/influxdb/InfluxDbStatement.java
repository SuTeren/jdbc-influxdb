package net.suteren.jdbc.influxdb;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.List;

import org.influxdb.dto.Query;
import org.influxdb.dto.QueryResult;

public class InfluxDbStatement implements Statement {
	private final InfluxDbConnection influxDbConnection;
	private SQLWarning error;
	private String cursorName;
	List<QueryResult.Result> results;
	int resultPosition = 0;
	private boolean isClosed = false;

	public InfluxDbStatement(InfluxDbConnection influxDbConnection) {
		this.influxDbConnection = influxDbConnection;
	}

	@Override public ResultSet executeQuery(String sql) {
		QueryResult query = influxDbConnection.influxDbClient.query(new Query(sql));
		error = new SQLWarning(query.getError());
		results = query.getResults();
		return new InfluxDbResultSet(this);
	}

	@Override public int executeUpdate(String sql) {
		return 0;
	}

	@Override public void close() {
		resultPosition = 0;
		results = null;
		isClosed = true;
	}

	@Override public int getMaxFieldSize() {
		return 0;
	}

	@Override public void setMaxFieldSize(int max) {

	}

	@Override public int getMaxRows() {
		return 0;
	}

	@Override public void setMaxRows(int max) {

	}

	@Override public void setEscapeProcessing(boolean enable) {

	}

	@Override public int getQueryTimeout() {
		return 0;
	}

	@Override public void setQueryTimeout(int seconds) {

	}

	@Override public void cancel() {

	}

	@Override public SQLWarning getWarnings() {
		return new SQLWarning(error);
	}

	@Override public void clearWarnings() {
		error = null;
	}

	@Override public void setCursorName(String name) {
		cursorName = name;
	}

	@Override public boolean execute(String sql) {
		return false;
	}

	@Override public ResultSet getResultSet() {
		return results != null && results.size() > resultPosition ?
			new InfluxDbResultSet(this) :
			null;
	}

	@Override public int getUpdateCount() {
		return 0;
	}

	@Override public boolean getMoreResults() {
		if (results.size() > resultPosition) {
			resultPosition++;
			return true;
		} else {
			return false;
		}
	}

	@Override public void setFetchDirection(int direction) {

	}

	@Override public int getFetchDirection() {
		return ResultSet.FETCH_UNKNOWN;
	}

	@Override public void setFetchSize(int rows) {

	}

	@Override public int getFetchSize() {
		return 0;
	}

	@Override public int getResultSetConcurrency() {
		return ResultSet.CONCUR_READ_ONLY;
	}

	@Override public int getResultSetType() {
		return ResultSet.TYPE_SCROLL_INSENSITIVE;
	}

	@Override public void addBatch(String sql) {

	}

	@Override public void clearBatch() {

	}

	@Override public int[] executeBatch() {
		return new int[0];
	}

	@Override public Connection getConnection() {
		return influxDbConnection;
	}

	@Override public boolean getMoreResults(int current) {
		return getMoreResults();
	}

	@Override public ResultSet getGeneratedKeys() {
		return null;
	}

	@Override public int executeUpdate(String sql, int autoGeneratedKeys) {
		return 0;
	}

	@Override public int executeUpdate(String sql, int[] columnIndexes) {
		return 0;
	}

	@Override public int executeUpdate(String sql, String[] columnNames) {
		return 0;
	}

	@Override public boolean execute(String sql, int autoGeneratedKeys) {
		return false;
	}

	@Override public boolean execute(String sql, int[] columnIndexes) {
		return false;
	}

	@Override public boolean execute(String sql, String[] columnNames) {
		return false;
	}

	@Override public int getResultSetHoldability() {
		return 0;
	}

	@Override public boolean isClosed() {
		return isClosed;
	}

	@Override public void setPoolable(boolean poolable) {

	}

	@Override public boolean isPoolable() {
		return false;
	}

	@Override public void closeOnCompletion() {

	}

	@Override public boolean isCloseOnCompletion() {
		return false;
	}

	@Override public <T> T unwrap(Class<T> iface) {
		return null;
	}

	@Override public boolean isWrapperFor(Class<?> iface) {
		return false;
	}
}
